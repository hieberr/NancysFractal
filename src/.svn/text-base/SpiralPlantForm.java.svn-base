import processing.core.*;
import java.math.*;

public class SpiralPlantForm extends DisplayableObject {
  float theta = .1f;
  float param2 = .35f;
  Graph graphContext;
  PImage pixelBuffer;
  SpiralPlantForm(PApplet processingContext, Graph graphContext){
    super(processingContext);
    this.graphContext = graphContext;
    
    //set up the pixelBuffer
    //float pixelwidth = graphContext.getPixelWidth();
    //float maxx = graphContext.getxMax() ;
    int width = (int)( (graphContext.getxMax() - graphContext.getxMin()) / graphContext.getPixelWidth() );
    int height = (int)( (graphContext.getyMax() - graphContext.getyMin()) / graphContext.getPixelHeight() );
    pixelBuffer = processingContext.createImage(width, height, processingContext.RGB);
  }
  
  protected void draw(){
    
    drawIntoPixelBuffer();
    //processingContext.image(pixelBuffer, -1, -1,pixelBuffer.width*graphContext.getPixelWidth(),pixelBuffer.height*graphContext.getPixelHeight());
    //pixelBuffer.
    //processingContext.image(pixelBuffer, -1, -1,2,2);
    
  }
  protected void drawIntoPixelBuffer(){
    
    int iterations = 10;
    float threshhold = 10; 
    float magnitude = 0;
    
    ComplexNumber2 u = new ComplexNumber2(theta,param2);
    //float u = theta;
    ComplexNumber2 z = new ComplexNumber2(0,0);
    
    float pixelWidth = graphContext.getPixelWidth();
    float pixelHeight =  graphContext.getPixelHeight();
    float graphMaxX = graphContext.getxMax();
    float graphMinX = graphContext.getxMin();    
    float graphMaxY = graphContext.getyMax();
    float graphMinY = graphContext.getyMin();  
    
    for(float ireal = graphMinX; ireal <= graphMaxX; ireal += pixelWidth){
      for(float iimaginary = graphMinY; iimaginary <= graphMaxY; iimaginary += pixelHeight){
        z.set(ireal, iimaginary);
        int i = 0;
        for(i = 0; i <= iterations; ++i){
        //  for(int k = 0; k<=i; ++k){
            z.mul(z);
           
            z.mul(u);
            z.mul(u);
            z.sub(u);
            
        //  }

          //check if z is heading off to infinity
          magnitude = processingContext.sqrt(z.real * z.real + z.imaginary * z.imaginary);
          //magnitude = z.real;
          if(magnitude >= threshhold){
            break;
          }

        }
        //processingContext.color(i,255,i);  //color is based on the number of iterations until until we reached the threshhold.
        int color = processingContext.abs((int)z.real % 256);
        int color2 = processingContext.abs((int)z.imaginary % 256);
        int color3 = (int)magnitude * 10;
        //processingContext.fill(magnitude%256,magnitude%256,magnitude%256);
        //processingContext.fill(color,color2,color3);
        //processingContext.rect(graphContext.getScreenCoordinateX(ireal), graphContext.getScreenCoordinateY(iimaginary), pixelWidth*1.01f, pixelHeight*1.01f);

        
        //processingContext.stroke(color,color2,color3);
        //processingContext.strokeWeight(.1f);
        //processingContext.point(graphContext.getScreenCoordinateX(ireal), graphContext.getScreenCoordinateY(iimaginary)); //slower for some reason.

         // Setting the color of a single pixel with set(x, y) is easy, but not as 
         //fast as putting the data directly into pixels[]. 
         //The equivalent statement to "set(x, y, #000000)" using pixels[] is 
         //"pixels[y*width+x] = #000000"
         float x,y;
         x = ((ireal-graphMinX)/pixelWidth);
         y = ((iimaginary-graphMinY)/pixelHeight);
         if(x>=799){
           x=799;
         }
         if(y>=799){
           y=799;
         }
         graphContext.plotPt(ireal,iimaginary,color,color2,color3);
         //pixelBuffer.loadPixels();
         //pixelBuffer.pixels[(int)((y*pixelBuffer.width)+x)] = processingContext.color(color,color2,color3);
         //pixelBuffer.updatePixels();
      }
    }
  }
  
  void incrementTheta(){
    theta += .1;
  }
  void decrementTheta(){
    theta -= .1;
  }
  
  void incrementParam2(){
    param2 += .01;
  }
  
  void decrementParam2(){
    param2 -= .01;  
  }
}
